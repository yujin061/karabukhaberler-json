name: Update JSON File

on:
  schedule:
    - cron: '0 */3 * * *' # Her 3 saatte bir çalışır
  workflow_dispatch: # Manuel çalıştırma için

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install dependencies
        run: npm install axios iconv-lite

      - name: Fetch and update JSON
        run: |
          node << 'EOF'
          const axios = require("axios");
          const fs = require("fs").promises;
          const iconv = require("iconv-lite");

          (async () => {
            try {
              console.log("JSON dosyasi cekiliyor...");
              const response = await axios.get("https://services.karabuk.bel.tr/jsons-karabukbeltr/data/data-haberler.json", {
                headers: {
                  "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                  "Accept": "application/json, text/plain, */*",
                  "Referer": "https://www.karabuk.bel.tr/",
                  "Accept-Language": "tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7",
                  "Connection": "keep-alive",
                  "Cache-Control": "no-cache"
                },
                responseType: "arraybuffer",
                timeout: 10000
              });

              console.log("Yanit alindi. Status Code:", response.status);
              
              // Yanıtı UTF-8'e çevir
              let jsonString = iconv.decode(response.data, "windows-1254");
              
              // Ham veriyi logla
              console.log("Ham veri (ilk 200 karakter):", jsonString.substring(0, 200));
              
              // JavaScript değişken tanımını kaldır
              jsonString = jsonString.replace(/^var\s+data\s*=\s*/, "");
              
              // BOM ve diğer görünmeyen karakterleri temizle
              jsonString = jsonString.replace(/[\u0000-\u001F\u007F-\u009F\u200B-\u200D\uFEFF]/g, "");
              
              // Başta ve sonda geçersiz karakterleri temizle
              jsonString = jsonString.replace(/^[^[{]+/, "").replace(/[^}\]]+$/, "");
              
              // Boşlukları temizle
              jsonString = jsonString.trim();
              
              // Virgül hatalarını düzelt
              jsonString = jsonString.replace(/,(\s*[}\]])/g, "$1");
              
              // JSON formatını düzelt
              jsonString = jsonString.replace(/\}\s*,\s*\{/g, "},{");
              jsonString = jsonString.replace(/\[\s*\{/g, "[{");
              jsonString = jsonString.replace(/\}\s*\]/g, "}]");
              
              // Sayısal değerleri string'e çevir
              jsonString = jsonString.replace(/:(\d+)([,}])/g, ':"$1"$2');
              jsonString = jsonString.replace(/:(\d+\.\d+)([,}])/g, ':"$1"$2');
              
              // Tarih formatını düzelt
              jsonString = jsonString.replace(/"tarih":\s*"(\d{2})\.(\d{2})\.(\d{4})"/g, '"tarih":"$1.$2.$3"');
              
              // Türkçe karakterleri düzelt
              jsonString = jsonString.replace(/\\u00fc/g, "ü");
              jsonString = jsonString.replace(/\\u0131/g, "ı");
              jsonString = jsonString.replace(/\\u011f/g, "ğ");
              jsonString = jsonString.replace(/\\u015f/g, "ş");
              jsonString = jsonString.replace(/\\u00e7/g, "ç");
              jsonString = jsonString.replace(/\\u00f6/g, "ö");
              
              // JSON'u parçalara ayır ve her parçayı düzelt
              const parts = jsonString.split(/({[^}]*})/g);
              jsonString = parts.map(part => {
                if (part.startsWith("{") && part.endsWith("}")) {
                  // Sayısal değerleri string'e çevir
                  return part.replace(/:(\d+)([,}])/g, (match, number, end) => {
                    return `:"${number}"${end}`;
                  });
                }
                return part;
              }).join("");
              
              // Hata konumundaki veriyi detaylı incele
              const errorPosition = 591;
              console.log("Hata konumundaki detayli inceleme:");
              console.log("Önceki 50 karakter:", jsonString.substring(errorPosition - 50, errorPosition));
              console.log("Hata konumu:", jsonString.substring(errorPosition, errorPosition + 10));
              console.log("Sonraki 50 karakter:", jsonString.substring(errorPosition + 10, errorPosition + 60));

              // JSON'u parse et
              console.log("JSON parse ediliyor...");
              let jsonData;
              try {
                jsonData = JSON.parse(jsonString);
              } catch (parseError) {
                console.error("JSON parse hatasi:", parseError.message);
                console.error("Hata konumu:", parseError.position);
                console.error("Hata satiri:", jsonString.substring(parseError.position - 50, parseError.position + 50));
                throw parseError;
              }

              let newsList = [];
              let latestNewsId = 100667942;

              console.log("JSON formati kontrol ediliyor...");
              if (jsonData && jsonData.haberler && Array.isArray(jsonData.haberler)) {
                console.log("JSON nesne icinde dizi formatinda, isleniyor...");
                newsList = jsonData.haberler.map((item, index) => {
                  const newsId = latestNewsId + (jsonData.haberler.length - 1) - index;
                  return {
                    haberbaslik: item.haberbaslik?.toString() ?? "",
                    haberkisa: item.haberkisa?.toString() ?? "",
                    tarih: item.tarih?.toString() ?? "",
                    kategoriadi: item.kategoriadi?.toString() ?? "",
                    okunma: item.okunma?.toString() ?? "",
                    haberresim: item.haberresim?.toString() ?? "",
                    detay_url: "https://www.karabuk.bel.tr/haber.asp?id=" + newsId
                  };
                });
              } else {
                console.error("Hata: JSON formati beklenenden farkli. JSON icerigi:", JSON.stringify(jsonData, null, 2));
                throw new Error("JSON formati beklenenden farkli");
              }

              console.log("Mevcut JSON dosyasi okunuyor...");
              let existingData = [];
              try {
                const existingContent = await fs.readFile("data-haberler.json", "utf8");
                existingData = JSON.parse(existingContent);
              } catch (err) {
                console.log("Mevcut dosya okunamadi, yeni dosya olusturulacak:", err.message);
              }

              const isChanged = JSON.stringify(existingData) !== JSON.stringify(newsList);
              console.log("Degisiklik kontrolu:", isChanged ? "Degisiklik var" : "Degisiklik yok");

              if (isChanged) {
                console.log("JSON dosyasi yaziliyor...");
                await fs.writeFile("data-haberler.json", JSON.stringify(newsList, null, 2));
                console.log("JSON dosyasi guncellendi:", newsList.length, "haber");
              } else {
                console.log("Degisiklik olmadigi icin dosya guncellenmedi.");
              }
            } catch (error) {
              console.error("Hata:", error.message);
              if (error.response) {
                console.error("Yanit Status Code:", error.response.status);
                console.error("Yanit Data:", error.response.data);
              }
              process.exit(1);
            }
          })();
          EOF

      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add data-haberler.json
          git commit -m 'JSON dosyası güncellendi' || echo "Değişiklik yok"
          git push
