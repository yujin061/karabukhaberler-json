const axios = require("axios");
const fs = require("fs");

async function fetchAndUpdateJSON() {
  try {
    console.log("API'den veri çekiliyor...");
    const response = await axios.get("https://services.karabuk.bel.tr/jsons-karabukbeltr/data/data-haberler.json", {
      responseType: "arraybuffer"
    });
    
    // Buffer oluştur ve UTF-16LE olarak decode et
    console.log("UTF-16LE kodlaması kullanılıyor...");
    const buffer = Buffer.from(response.data);
    const decoded = buffer.toString('utf16le');
    
    // Ham veriyi kaydet
    fs.writeFileSync("raw-data.txt", decoded);
    console.log("Ham veri dosyası kaydedildi: raw-data.txt");
    
    // "var data = " kısmını ve sondaki ";" işaretini temizle
    let cleanedData = decoded.replace(/^[\ufeff\ufffe]?var\s+data\s*=\s*/, "").replace(/;[\s\n\r]*$/, "");
    
    // Temizlenmiş veriyi kaydet
    fs.writeFileSync("cleaned-data.txt", cleanedData);
    console.log("Temizlenmiş veri dosyası kaydedildi: cleaned-data.txt");
    
    // RegEx ile veriyi satır satır işleyerek temizle
    console.log("Gelişmiş veri temizleme başlıyor...");
    
    // Veriyi satır satır böl
    const lines = cleanedData.split('\n');
    let jsonString = '';
    let inHTMLContent = false;
    let currentHTMLContent = '';
    let objectDepth = 0;
    
    // Her satırı işle
    for (let i = 0; i < lines.length; i++) {
      let line = lines[i].trim();
      
      // HTML içeriği işleme
      if (line.includes('haberdetay') && line.includes('<p>')) {
        inHTMLContent = true;
        // HTML başlangıcını al
        const parts = line.split('haberdetay');
        jsonString += parts[0] + 'haberdetay": "';
        currentHTMLContent = parts[1].replace(/^[\s:"]*/, '').replace(/",?$/, '');
      } 
      else if (inHTMLContent) {
        // HTML içeriğini topla
        if (line.includes('"') && !line.startsWith('<') && objectDepth === 0) {
          // HTML içeriği bitti
          inHTMLContent = false;
          
          // Tüm HTML içeriğini escape et
          const escapedHTML = currentHTMLContent
            .replace(/\\/g, '\\\\')  // Önce ters eğik çizgileri escape et
            .replace(/"/g, '\\"')    // Çift tırnakları escape et
            .replace(/\n/g, '\\n')   // Yeni satırları escape et
            .replace(/\r/g, '\\r')   // Satır başlarını escape et
            .replace(/\t/g, '\\t')   // Tab karakterlerini escape et
            .replace(/\f/g, '\\f');  // Form feed karakterlerini escape et
          
          jsonString += escapedHTML + '"' + line;
        } else {
          // HTML içeriğine ekle
          currentHTMLContent += line;
          
          // Obje derinliğini takip et
          objectDepth += (line.match(/{/g) || []).length;
          objectDepth -= (line.match(/}/g) || []).length;
        }
      } else {
        // Normal JSON işleme
        jsonString += line;
      }
    }
    
    // Temizlenmiş JSON'u kaydet
    fs.writeFileSync("processed-data.txt", jsonString);
    console.log("İşlenmiş veri dosyası kaydedildi: processed-data.txt");
    
    // JSON formatını düzelt
    let fixedJson = jsonString
      // Virgülsüz nesneleri düzelt
      .replace(/}(\s*){/g, '},\n{')
      // Fazla virgülleri temizle
      .replace(/,(\s*[}\]])/g, '$1')
      // Eksik virgülleri ekle
      .replace(/}(\s*){/g, '},\n{');
    
    // Son düzeltmeleri kaydet
    fs.writeFileSync("final-data.txt", fixedJson);
    console.log("Son düzeltmeler kaydedildi: final-data.txt");
    
    try {
      // JSON olarak parse et
      const jsonData = JSON.parse(`[${fixedJson}]`);
      console.log("JSON başarıyla parse edildi!");
      
      // Veriyi düzgün JSON formatında kaydet
      fs.writeFileSync("data-haberler.json", JSON.stringify(jsonData, null, 2));
      console.log("JSON dosyası başarıyla güncellendi!");
      return true;
    } catch (parseError) {
      console.error("JSON parse hatası:", parseError);
      
      // Son çare: eval kullanımı (güvenlik açısından riskli ama kontrollü ortamda kullanılabilir)
      console.log("Son çare yöntemi deneniyor (eval)...");
      try {
        const evalScript = `
          const fs = require('fs');
          const data = ${cleanedData};
          fs.writeFileSync('data-haberler.json', JSON.stringify(data, null, 2));
        `;
        
        // Geçici bir JS dosyası oluştur
        fs.writeFileSync("eval-script.js", evalScript);
        
        // Dosyayı çalıştır
        require('child_process').execSync('node --max-old-space-size=4096 eval-script.js', {
          stdio: 'inherit',
          env: { ...process.env, NODE_OPTIONS: '--no-warnings' }
        });
        
        console.log("Son çare yöntemi başarılı!");
        return true;
      } catch (evalError) {
        console.error("Son çare yöntemi başarısız:", evalError);
        
        // En son çare: HTML içeriğini tamamen kaldır
        console.log("HTML içeriğini kaldırarak deneniyor...");
        try {
          let strippedData = cleanedData.replace(/"haberdetay"\s*:\s*"[^"]*"/g, '"haberdetay": "HTML içeriği kaldırıldı"');
          fs.writeFileSync("stripped-data.txt", strippedData);
          
          const jsonData = JSON.parse(`[${strippedData}]`);
          fs.writeFileSync("data-haberler.json", JSON.stringify(jsonData, null, 2));
          console.log("HTML içeriği kaldırılarak JSON kaydedildi!");
          return true;
        } catch (stripError) {
          console.error("Tüm yöntemler başarısız oldu:", stripError);
          throw stripError;
        }
      }
    }
  } catch (error) {
    console.error("Hata oluştu:", error);
    process.exit(1);
  }
}

fetchAndUpdateJSON();
