name: Update JSON Data

on:
  schedule:
    - cron: '0 */3 * * *' # Her 3 saatte bir çalışır
  workflow_dispatch: # Manuel tetikleme

jobs:
  update-json:
    runs-on: ubuntu-latest

    steps:
      - name: Depoyu çek
        uses: actions/checkout@v4

      - name: Python'u kur
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Bağımlılıkları yükle
        run: |
          python -m pip install --upgrade pip
          pip install requests html2text

      - name: JSON'u çek ve işle
        run: |
          python - <<EOF
          import requests
          import json
          import html2text
          import re

          # JSON URL'si
          url = "https://services.karabuk.bel.tr/jsons-karabukbeltr/data/data-haberler.json"
          headers = {
              "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
          }

          # JSON'u çek
          try:
              response = requests.get(url, headers=headers, timeout=10)
              response.raise_for_status()
          except requests.exceptions.RequestException as e:
              print(f"Veri çekme hatası: {e}")
              exit(1)

          # Ham veriyi dosyaya kaydet (hata ayıklamak için)
          raw_content = response.text
          with open("raw_response.txt", "w", encoding="utf-8") as f:
              f.write(raw_content)

          # Çöp karakterleri temizle (ASCII olmayan karakterler)
          raw_content = ''.join(c for c in raw_content if ord(c) < 128 or c in 'şçğüöıŞÇĞÜÖİ')

          # 'var data =' önekini kaldır
          var_data_start = raw_content.find('var data =')
          if var_data_start != -1:
              raw_content = raw_content[var_data_start + len('var data ='):].strip()
          else:
              print("Uyarı: 'var data =' öneği bulunamadı, ham veriyi olduğu gibi işliyoruz")

          # JSON başlangıcını bul
          json_start = raw_content.find('{"haberler":')
          if json_start == -1:
              # Alternatif: Düzenli ifadeyle JSON içeriğini çıkar
              json_match = re.search(r'\{"haberler":\s*\[[\s\S]*?\]\s*\}', raw_content)
              if json_match:
                  raw_content = json_match.group(0)
              else:
                  print("Hata: JSON verisi bulunamadı")
                  print(f"Ham içerik (ilk 500 karakter): {raw_content[:500]}...")
                  exit(1)
          else:
              raw_content = raw_content[json_start:]

          # Bozuk karakterleri temizle ve UTF-8'e zorla
          raw_content = raw_content.encode('utf-8', errors='ignore').decode('utf-8', errors='ignore')

          # JSON'u ayrıştır
          try:
              data = json.loads(raw_content)
          except json.JSONDecodeError as e:
              print(f"JSON ayrıştırma hatası: {e}")
              print(f"Ham içerik (ilk 500 karakter): {raw_content[:500]}...")
              exit(1)

          # html2text'i başlat
          h = html2text.Html2text()
          h.ignore_links = True
          h.ignore_images = True
          h.body_width = 0

          # Verileri işle
          cleaned_data = []
          for item in data.get("haberler", []):
              # haberkisa boşsa atla
              if not item.get("haberkisa"):
                  continue

              # haberdetay'ı düz metne çevir
              haberdetay = item.get("haberdetay", "")
              if haberdetay:
                  plain_text = h.handle(haberdetay)
                  plain_text = re.sub(r'\n\s*\n', '\n', plain_text.strip())
              else:
                  plain_text = ""

              # Temizlenmiş veriyi oluştur
              cleaned_item = {
                  "kategoriadi": item.get("kategoriadi", ""),
                  "haberresim": item.get("haberresim", ""),
                  "haberbaslik": item.get("haberbaslik", ""),
                  "haberkisa": item.get("haberkisa", ""),
                  "tarih": item.get("tarih", ""),
                  "detay_url": plain_text
              }
              cleaned_data.append(cleaned_item)

          # data-haberler.json'a yaz
          with open("data-haberler.json", "w", encoding="utf-8") as f:
              json.dump(cleaned_data, f, ensure_ascii=False, indent=2)
          EOF

      - name: Ham yanıtı artifact olarak yükle
        if: failure() # Hata durumunda çalışır
        uses: actions/upload-artifact@v4
        with:
          name: raw-response
          path: raw_response.txt

      - name: Değişiklikleri kaydet ve gönder
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add data-haberler.json
          git diff --quiet && git diff --staged --quiet || git commit -m "data-haberler.json güncellendi"
          git push
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
